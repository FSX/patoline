(* #FORMAT FormatSlides *)
(* #PACKAGES mysql *)

\Caml(
open Diagrams
open Proj3d
open Typography.Db

let caml x = x


let db_info = Mysql Mysql.(
    { defaults with
      dbhost = Some "localhost";
      dbname = Some "patonet";
      dbpwd = Some "patonet";
      dbuser = Some "patonet";})

let db = init_db db_info
 
)

== Animation ==

\begin{slide}
\begin{center}
\size(5.0){Interactive Patoline}


\caml([bB (fun env-> [Drawing (image "titleduck.png" env)])])
\end{center}
\end{slide}


\begin{slide}
\begin{center}
\animation(90)(fun t -> let t = float t /. 45. *. 3.1415927 in
   let proj t = {distance_focale = 55.;
   origin_transfo_x = 10.;
   origin_transfo_y = 10.;
   origin_transfo_z = 10.; (* boucle avec 10.0 *)
   origin_diag = (10.,10.,10.); (* pour que le centre du cube ne bouge pas *)
   axe_angle = 0.;
   rot_angle = t;
   homotetie = 1.0;} in
   let projection = proj t in
<<\diagram(
(*   let _ = cube projection*)
 let a = Node.(node [anchor `Base;at3d projection (0.,0.,0.)] <<a>>) 
 let b = Node.(node [anchor `Base;at3d projection (20.,0.,0.)] <<b>>)
 let c = Node.(node [anchor `Base;at3d projection (20.,20.,0.)] <<c>>)
 let d = Node.(node [anchor `Base;at3d projection (0.,20.,0.)] <<d>>)
 let a' = Node.(node [anchor `Base;at3d projection (0.,0.,20.)] <<a'>>) 
 let b' = Node.(node [anchor `Base;at3d projection (20.,0.,20.)] <<b'>>) 
 let c' = Node.(node [anchor `Base;at3d projection (20.,20.,20.)] <<c'>>) 
 let d' = Node.(node [anchor `Base;at3d projection (0.,20.,20.)] <<d'>>) 


  let _ = edge_3d Edge.([arrow;draw]) a b
  let _ = edge_3d Edge.([arrow;draw]) d c
  let _ = edge_3d Edge.([arrow;draw]) a d
  let _ = edge_3d Edge.([arrow;draw]) b c

  let _ = edge_3d Edge.([arrow;draw]) a' b'
  let _ = edge_3d Edge.([arrow;draw]) d' c'
  let _ = edge_3d Edge.([arrow;draw]) a' d'
  let _ = edge_3d Edge.([arrow;draw]) b' c'

  let _ = edge_3d Edge.([arrow;draw]) a' a
  let _ = edge_3d Edge.([arrow;draw]) b' b
  let _ = edge_3d Edge.([arrow;draw]) c' c
  let _ = edge_3d Edge.([arrow;draw]) d' d

   let e' = Node.(node [at3d projection (10.,10.,10.);rectangle env;draw;innerSep 20.0] (<<x>>))

)>>)
\end{center}
\end{slide}

== Dynamisme ==

\begin{slide}
\begin{itemize}

\Caml(let read_count, write_count = db.create_data ~global:true "count" 0)
\item \button("test")(["cible"]){Un bouton} qui a été cliqué
\dynamic("cible")(function ev ->
  	  (match ev with 
	     Click "test"-> let c = read_count () + 1 in write_count c; Printf.fprintf stderr "incr count to: %d\n%!" c; Public 
           | _ -> Unchanged)){0123456789 fois}(
	   fun () -> <<\caml(let c = read_count () in Printf.fprintf stderr "read count to: %d\n%!" c; [tT (string_of_int c)]) fois !>>)

\Caml(let read_count2, write_count2 = db.create_data ~global:false "count" 0)
\item \button("test")(["cible2"]){Un autre bouton} qui a été cliqué
\dynamic("cible2")(function ev ->
  	  (match ev with 
	     Click "test"-> let c = read_count2 () + 1 in write_count2 c; Printf.fprintf stderr "incr count to: %d\n%!" c; Public 
           | _ -> Unchanged)){0123456789 fois}(
	   fun () -> <<\caml(let c = read_count2 () in Printf.fprintf stderr "read count to: %d\n%!" c; [tT (string_of_int c)]) fois !>>)

\item Et une figure dont on peut bouger les sommets :

\begin{center}
\Caml(
let readA, writeA = db.create_data ~global:false "Apos" (10.0,10.0)
let readB, writeB = db.create_data ~global:false "Bpos" (-10.0,-10.0)
let readC, writeC = db.create_data ~global:false "Cpos" (10.0,-10.0)
let readA () =
    let (x,y as c) = readA () in
    Printf.eprintf "A = (%f, %f)\n" x y;
    c 
let readB () =
    let (x,y as c) = readB () in
    Printf.eprintf "B = (%f, %f)\n" x y;
    c 
let readC () =
    let (x,y as c) = readC () in
    Printf.eprintf "C = (%f, %f)\n" x y;
    c 
)
\dynamic("figure")(
	function ev ->
  	  (match ev with
	   | Drag("a",p) -> writeA Vector.(p + readA ()); Private
	   | Drag("b",p) -> writeB Vector.(p + readB ()); Private
	   | Drag("c",p) -> writeC Vector.(p + readC ()); Private
	   | _ -> Unchanged))([])(fun () -> <<
\diagram(
 let frame = Node.(node [at (0.,0.);rectangle env;draw; color (mix 0.5 white blue); innerSep 20.] [])
 let apos = readA () and bpos = readB () and cpos = readC ()
 let av = Vector.(scal_mul 3. (normalise (apos - bpos + apos - cpos)))
 let bv = Vector.(scal_mul 3. (normalise (bpos - cpos + bpos - apos)))
 let cv = Vector.(scal_mul 3. (normalise (cpos - apos + cpos - bpos)))
 let ab = Node.(node [at Point.(middle apos bpos); innerSep 0.] [])
 let bc = Node.(node [at Point.(middle bpos cpos); innerSep 0.] [])
 let ca = Node.(node [at Point.(middle cpos apos); innerSep 0.] [])
 let a = Node.(node [circle; fill black; innerSep 0.4; label ~pos:(`Vec av) env <<A>>; at apos; drag ("a",["figure"])] []) 
 let b = Node.(node [circle; fill black; innerSep 0.4; label ~pos:(`Vec bv) env <<B>>; at bpos; drag ("b",["figure"])] [])
 let c = Node.(node [circle; fill black; innerSep 0.4; label ~pos:(`Vec cv) env <<C>>; at cpos; drag ("c",["figure"])] [])
 let _ = edge Edge.([draw]) a b
 let _ = edge Edge.([draw]) b c
 let _ = edge Edge.([draw]) c a
 let _ = edge Edge.([draw]) a bc
 let _ = edge Edge.([draw]) b ca
 let _ = edge Edge.([draw]) c ab
)>>)

\end{center}
\item C'est tout pour aujourd'hui !
\end{itemize}
\end{slide}
