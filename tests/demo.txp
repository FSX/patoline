(* #FORMAT FormatSlides *)
(* #PACKAGES mysql *)
(* #PACKAGES Typography.Interactive *)

\Caml(
open Diagrams
open Proj3d
open Typography.Db
open DefaultFormat

let caml x = x


let db_info = Mysql Mysql.(
    { defaults with
      dbhost = Some "localhost";
      dbname = Some "patonet";
      dbpwd = Some "patonet";
      dbuser = Some "patonet";})

let db = init_db "demo" db_info

module MyDb = struct 
  let db = db
  let base_dir = "/tmp"
end

module Interactive =
  Interactive.Make(D)(Patoline_Format)(MyDb)
open Interactive  
)


== Animation ==

\begin{slide}
\begin{center}
\size(5.0){Interactive Patoline}


\caml([bB (fun env-> [Drawing (image "titleduck.png" env)])])
\end{center}
\end{slide}



== Dynamisme ==

\begin{slide}
\begin{itemize}

\Caml(let read_count, write_count = db.create_data ~global:true "count" 0)
\item \button("test")(["cible"]){Un bouton} qui a été cliqué
\dynamic("cible")(function ev ->
  	  (match ev with 
	     Click "test"-> let c = read_count () + 1 in write_count c; Public 
           | _ -> Unchanged)){0123456789 fois}(
	   fun () -> <<\caml(let c = read_count () in [tT (string_of_int c)]) fois !>>)

\Caml(let read_count2, write_count2 = db.create_data ~global:false "count" 0)
\item \button("test")(["cible2"]){Un autre bouton} qui a été cliqué
\dynamic("cible2")(function ev ->
  	  (match ev with 
	     Click "test"-> let c = read_count2 () + 1 in write_count2 c; Public 
           | _ -> Unchanged)){0123456789 fois}(
	   fun () -> <<\caml(let c = read_count2 () in [tT (string_of_int c)]) fois !>>)

\item Chercher la différence entre ces deux boutons ! indication~: ouvrez deux fois la présentation.

\item Et une figure dont on peut bouger les sommets :

\begin{center}
\Caml(
let readA, writeA = db.create_data ~global:false "Apos" (10.0,10.0)
let readB, writeB = db.create_data ~global:false "Bpos" (-10.0,-10.0)
let readC, writeC = db.create_data ~global:false "Cpos" (10.0,-10.0)
)
\dynamic("figure")(
	function ev ->
  	  (match ev with
	   | Drag("a",p) -> writeA Vector.(p + readA ()); Private
	   | Drag("b",p) -> writeB Vector.(p + readB ()); Private
	   | Drag("c",p) -> writeC Vector.(p + readC ()); Private
	   | _ -> Unchanged))([])(fun () -> <<
\diagram(
 let frame = Node.(node [at (0.,0.);rectangle env;draw; color (mix 0.5 white blue); innerSep 20.] [])
 let apos = readA () and bpos = readB () and cpos = readC ()
 let av = Vector.(scal_mul 3. (normalise (apos - bpos + apos - cpos)))
 let bv = Vector.(scal_mul 3. (normalise (bpos - cpos + bpos - apos)))
 let cv = Vector.(scal_mul 3. (normalise (cpos - apos + cpos - bpos)))
 let ab = Node.(node [at Point.(middle apos bpos); innerSep 0.] [])
 let bc = Node.(node [at Point.(middle bpos cpos); innerSep 0.] [])
 let ca = Node.(node [at Point.(middle cpos apos); innerSep 0.] [])
 let a = Node.(node [circle; fill black; innerSep 0.4; label ~pos:(`Vec av) env <<A>>; at apos; drag ("a",["figure"])] []) 
 let b = Node.(node [circle; fill black; innerSep 0.4; label ~pos:(`Vec bv) env <<B>>; at bpos; drag ("b",["figure"])] [])
 let c = Node.(node [circle; fill black; innerSep 0.4; label ~pos:(`Vec cv) env <<C>>; at cpos; drag ("c",["figure"])] [])
 let _ = edge Edge.([draw]) a b
 let _ = edge Edge.([draw]) b c
 let _ = edge Edge.([draw]) c a
 let _ = edge Edge.([draw]) a bc
 let _ = edge Edge.([draw]) b ca
 let _ = edge Edge.([draw]) c ab
)>>)

\end{center}
\end{itemize}
\end{slide}

\Caml(
type sondage =
  Null
| Fun_but
| Fun_yes
| No_opinion
| No_answer

let readSonde, writeSonde = db.create_data ~global:false "sondage" No_answer

let box name s =
 dynamic name
 (function ev -> Private) 
 (<<$X$ $O$>>)
 (fun () -> if readSonde () = s then (<<$X$>>) else (<<$O$>>))
)

\begin{slide}

\begin{center}
\size(5.0){Un petit sondage}
\vspaceAfter(5.0)
\end{center}

\button("Null")(["Sondage";"Null";"Fun_but";"Fun_yes";"No_opinion"]){
  \box("Null")(Null) Patoline c'est null, ça ne marchera jamais.}

\button("Fun_but")(["Sondage";"Null";"Fun_but";"Fun_yes";"No_opinion"]){
  \box("Fun_but")(Fun_but) Patoline c'est chouette, mais ça ne marchera pas.}

\button("Fun_yes")(["Sondage";"Null";"Fun_but";"Fun_yes";"No_opinion"]){
  \box("Fun_yes")(Fun_yes) Patoline c'est chouette, et ça va casser la baraque !}

\button("No_opinion")(["Sondage";"Null";"Fun_but";"Fun_yes";"No_opinion"]){
  \box("No_opinion")(No_opinion) Je ne sais pas.}
\end{slide}

\begin{slide}
\begin{center}
\size(5.0){Résultats du sondage}
\end{center}

\begin{dynamic}("Sondage")(
 function
   Click("Null") -> writeSonde Null; Public
 | Click("Fun_but") -> writeSonde Fun_but; Public
 | Click("Fun_yes") -> writeSonde Fun_yes; Public
 | Click("No_opinion") -> writeSonde No_opinion; Public
 | _ -> Unchanged)([])

\Caml(
let result = ref []
let update () = 
 let mysql_db = match db.db () with
  MysqlDb db -> db(* | _ -> assert false*) in
let sql = "SELECT `value`,COUNT(`sessid`) FROM `demo` WHERE `key` = 'sondage' GROUP BY `value`" in
let r = Mysql.exec mysql_db sql in
let f = function None -> "" | Some s -> s in
result :=  
  let l = ref [] in
  try while true do
    match Mysql.fetch r with 
      None -> raise Exit
    | Some row -> l := (Marshal.from_string (base64_decode (f row.(0))) 0, f row.(1))::!l
  done; []
  with Exit -> !l
)

\begin{itemize}
\item Null~: \caml([C (fun env -> update (); let n = try List.assoc Null !result with Not_found -> "0" in [tT n])])

\item Fun but~: \caml([C (fun env -> let n = try List.assoc Fun_but !result with Not_found -> "0" in [tT n])])

\item Fun yes~: \caml([C (fun env -> let n = try List.assoc Fun_yes !result with Not_found -> "0" in [tT n])])

\item No opinion~: \caml([C (fun env -> let n = try List.assoc No_opinion !result with Not_found -> "0" in [tT n])])
\end{itemize}
\end{dynamic}
\end{slide}

\begin{slide}

Un petit programme éditable~:

\caml(
editableText ~min_line:5 ~lang:lang_OCaml ~extra:test_ocaml ~init_text:"let _ = Printf.printf \"Hello World\\n\"" "testML" 
)

\end{slide}

\begin{slide}


\begin{center}
\animation(90)(fun t -> let t = float t /. 45. *. 3.1415927 in
   let proj t = {distance_focale = 55.;
   origin_transfo_x = 10.;
   origin_transfo_y = 10.;
   origin_transfo_z = 10.; (* boucle avec 10.0 *)
   origin_diag = (10.,10.,10.); (* pour que le centre du cube ne bouge pas *)
   axe_angle = 0.;
   rot_angle = t;
   homotetie = 1.0;} in
   let projection = proj t in
<<\diagram(
(*   let _ = cube projection*)
 let a = Node.(node [anchor `Base;at3d projection (0.,0.,0.)] <<a>>) 
 let b = Node.(node [anchor `Base;at3d projection (20.,0.,0.)] <<b>>)
 let c = Node.(node [anchor `Base;at3d projection (20.,20.,0.)] <<c>>)
 let d = Node.(node [anchor `Base;at3d projection (0.,20.,0.)] <<d>>)
 let a' = Node.(node [anchor `Base;at3d projection (0.,0.,20.)] <<a'>>) 
 let b' = Node.(node [anchor `Base;at3d projection (20.,0.,20.)] <<b'>>) 
 let c' = Node.(node [anchor `Base;at3d projection (20.,20.,20.)] <<c'>>) 
 let d' = Node.(node [anchor `Base;at3d projection (0.,20.,20.)] <<d'>>) 


  let _ = edge_3d Edge.([arrow;draw]) a b
  let _ = edge_3d Edge.([arrow;draw]) d c
  let _ = edge_3d Edge.([arrow;draw]) a d
  let _ = edge_3d Edge.([arrow;draw]) b c

  let _ = edge_3d Edge.([arrow;draw]) a' b'
  let _ = edge_3d Edge.([arrow;draw]) d' c'
  let _ = edge_3d Edge.([arrow;draw]) a' d'
  let _ = edge_3d Edge.([arrow;draw]) b' c'

  let _ = edge_3d Edge.([arrow;draw]) a' a
  let _ = edge_3d Edge.([arrow;draw]) b' b
  let _ = edge_3d Edge.([arrow;draw]) c' c
  let _ = edge_3d Edge.([arrow;draw]) d' d

   let e' = Node.(node [at3d projection (10.,10.,10.);rectangle env;draw;innerSep 20.0] (<<x>>))

)>>)
\end{center}

\begin{center}
\size(7.0){Thanks for you attention}
\end{center}
\end{slide}

