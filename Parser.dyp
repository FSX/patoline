{
open Drivers
open Binary
open Boxes
open Constants
open Lexing 
open Util
open Dyp
open CamomileLibrary

let current_font=ref (Fonts.loadFont "AGaramondPro-Regular.otf")
let current_size=ref 4.

let set_newline dyplexbuf =
  let l = Dyp.std_lexbuf dyplexbuf in
  let pos = l.lex_curr_p in
  let npos = { pos with pos_lnum = pos.pos_lnum + 1; pos_bol = pos.pos_cnum } in
  l.lex_curr_p <- npos
        
type global_data = { cur_section : int IntMap.t }

let global_data = { cur_section = IntMap.empty }

let dyp_merge = Dyp.keep_all

(* very important to allow using regexp for special combination of characteres *)
let dypgen_choose_token = `all
}

%start main

%relation atom<seq

%layout [ ' ' '\r' '\t' ]
 
%lexer

let utf8_char =
    ['\033'-'\091''\093'-'\127']
  | ['\194'-'\223']['\129'-'\191']
  | ['\224'-'\238']['\129'-'\191']['\129'-'\191']
  | '\239'['\129'-'\159']['\129'-'\191']
  | ['\240'-'\243']['\129'-'\191']['\129'-'\191']['\129'-'\191']
  | '\244'['\129'-'\143']['\129'-'\191']['\129'-'\191']

let macro = ['A'-'Z''a'-'z''_']['A'-'Z''a'-'z''0'-'9''_']

main lexer =
  utf8_char+ -> WORD { let fsize= !current_size in Util.glyph_of_string !current_font fsize (Dyp.lexeme lexbuf) }
  '\n' -> NEWLINE { set_newline lexbuf }
  '\\''\\' -> CHAR { UTF8.get ("\\") 0 }
  '\\' -> SPECIAL

%parser

paragraph:
    WORD<w> { w }
  | paragraph<p> NEWLINE? WORD<w>
    { let fsize= !current_size in
        p@(Glue { glue_min_width= 2.*. fsize/.9.;
                  glue_max_width= fsize/.2.;
                  glue_badness=knuth_h_badness (fsize/.3.) }) :: w }

header:
   SPECIAL ['='+ | '-'+]<op> paragraph<p> ['='+ | '-'+]<cl>
     @{ if cl <> op then raise Dyp.Giveup;
       let numbering = op.[0] = '=' in
       let op = String.length op in 
       let l = 1. +. 0.5 *. float op in
       let fsize = !current_size in
       let p, global_data =
         if numbering then
           let global_data = { dyp.global_data with cur_section = Section.increment op dyp.global_data.cur_section } in
           let s = Section.index_to_string !current_font fsize global_data.cur_section in 
             s @ ((Glue { glue_min_width= 2.*. fsize/.9.;
                          glue_max_width= fsize/.2.;
                          glue_badness=knuth_h_badness (fsize/.3.) }) :: 
                    (Mark 0)::p), global_data
         else 
	   p, global_data
       in
       let p = List.map (function
                             GlyphBox (size,b) -> GlyphBox (l*.size, b)
                           | Glue x -> Glue { glue_min_width= x.glue_min_width*.l;
                                              glue_max_width= x.glue_max_width*.l;
                                              glue_badness = knuth_h_badness (2.*.(x.glue_max_width+.x.glue_min_width)/.3.) }
                           | x->x) p
       in
         p, [Global_data global_data]
      }

paragraphs:
   paragraph<p> [parskip paragraph]*<ps>
     { p::ps }

parskip:
  | NEWLINE NEWLINE+

newlines:
  | NEWLINE*

text:
    newlines
    { [] } atom
  | text(<=seq)<t> header<h> newlines
    { h::t } atom  
  | text(<=atom)<t> paragraphs<p> newlines
    { p @ t } seq
  
main:
  | text<t> eof 
    { t }

