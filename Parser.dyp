{
open Lexing
open Dyp

let set_newline dyplexbuf =
  let l = Dyp.std_lexbuf dyplexbuf in
  let pos = l.lex_curr_p in
  let npos = { pos with pos_lnum = pos.pos_lnum + 1; pos_bol = pos.pos_cnum } in
  l.lex_curr_p <- npos

(* very important to allow using regexp for special combination of characteres *)
(* let dypgen_choose_token = `all *)

let dyp_merge = keep_one

type doc =
     Paragraph of string
   | Struct of (string * doc list)
}

%start main

%relation atom<seq

%layout [ ' ' '\r' '\t' ]

%lexer

let utf8_char =
    ['\033'-'\127']
  | ['\194'-'\223']['\129'-'\191']
  | ['\224'-'\238']['\129'-'\191']['\129'-'\191']
  | '\239'['\129'-'\159']['\129'-'\191']
  | ['\240'-'\243']['\129'-'\191']['\129'-'\191']['\129'-'\191']
  | '\244'['\129'-'\143']['\129'-'\191']['\129'-'\191']

let macro = ['A'-'Z''a'-'z''_']['A'-'Z''a'-'z''0'-'9''_']

main lexer =
  '\n' -> NEWLINE { set_newline lexbuf }
  '=''='+ -> SECT { Dyp.lexeme lexbuf }
  utf8_char+ -> WORD { Dyp.lexeme lexbuf }

%parser

paragraph:
    WORD<w> { w }
  | paragraph<p> NEWLINE? WORD<w> { p ^ " " ^ w }

preambule:
  [NEWLINE]*
	{ None }
| - SECT<st> [NEWLINE]*
  paragraph<title> [NEWLINE]*
  [ parskip paragraph<author> [NEWLINE]* 
    [parskip paragraph]?<institute> [NEWLINE]* {author, institute} ]?<at> 
  - SECT<en> [NEWLINE]*    
  { if String.length $1 < 10 or String.length en < 10 then raise Giveup;
    Some(title,at) }

parskip:
  | NEWLINE [NEWLINE]+

ptext:
  /* empty */
    {[]}
  | parskip text<t>
    { t }

textp:
    { [] }
  | text<t> parskip
    { t }

textn:
    { [] }
  | text<t> [NEWLINE]*
    { t }

text:
  | textp<t> paragraph<p>
    { Paragraph p :: t }
  | textn<t> - "=>" NEWLINE? paragraph<title> ptext<content> [NEWLINE]* "=<"
    { Struct(title, List.rev content) :: t }

main:
  | preambule<p> text<t> [NEWLINE]* eof
    { p, List.rev t }
  
