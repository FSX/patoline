
(* test *)

(* 
   A compiler avec 
   texprime --caml "-I +bibi -I +sqlite3 Diagram.cmxa sqlite3.cmxa bibi.cmxa" --format Format/Article Dcats.txp
*)

(* test *)

====================================================
Generating playgrounds

Tom Hirschowitz

CNRS, Université de Savoie
====================================================


(* test *)


{{
open Diagrams.Diagram
open Diagrams
open Typography.Document
open Typography.Complete
open Typography.Fonts.FTypes
open Typography.Util
open Typography.Boxes
open Typography.Fonts
(* open Typography.Constants *)
(* open Typography.Binary *)

module DFormat = Format.Default
open Format

let color x b = [Scoped ((fun env -> { env with fontColor = x }), b)]
let red=RGB {red=1.;green=0.;blue=0.}
let figRef ()= [B (fun env->
    let i=try match snd (StrMap.find "figures" env.counters) with []->0 | h::_->h with Not_found -> 0 in
     [User (FigureRef i)])]
let large text = [size 10. text]
let bb x = [Scoped ((fun env -> { env with fontAlternative = Bold }), x)]
let emph = toggleItalic
let cat = <$C$> (* [ Maths.Ordinary (Maths.noad (Maths.glyphs "C")) ] *)
let indiv = <$I$>
  let mamacro () = << du texte >>
open Article
}}


\Begin{abstract}
We generalise the construction in previous work \cite{{["Hirschowitz"]}} of a playground for CCS. New instances are $\pi$ and $\lambda$.

\End{abstract}



(* -> Table of contents *)

(* {{ let _ = tableOfContents D.structure (top (List.hd !D.structure)) 1 }} *)

{{

 (*  let _ = newStruct ~in_toc:false ~numbered:false D.structure ((T "Table of contents")::[]);; *)

 (* let _ = Default.table_of_contents D.structure (top (List.hd !D.structure)) 1 ;; *)
 
 (* let _ = go_up D.structure (\* 2 *\) *)

}}
(* -< *)


=> Signatures for playgrounds

\Begin{definition}

 An \emph{individuality} category is a category $\cat$ equipped with a subcategory $\indiv{}$ 
     of \emph{individuals}, which is discrete.

\End{definition}
In any individuality category $\cat$, an \emph{interface} is an object $X$ such that the slice
category $C/X$ is empty, and a \emph{player} is a morphism $d → X$, with $d ∈ I$.

  Let us start with a category $\cat$. 

{{

  let fig env=
    let i, statei = node env [ `Shape `Rectangle ] <<$I$>> in
    let j, statej = node env [ `Shape `Rectangle ; `OuterSep 0.3 ; `Draw ; `At (20.,20.) ] <<$J$>> in
    let ij, stateij = edge [`Draw; `Head `To] j [[(10.,20.)]] i in
    let k,statek = node env [ `At (ij.anchor (`Temporal 0.5)) ; `Anchor `SouthEast] <<$K$>> in
    let m,statem = matrix env [`At (20.,0.); `Anchor `NorthWest ] [
      [ ([],<<$a$>>) ; ([`Shape `Rectangle;`Draw],<<$b$>>) ] ;
      [ ([],<<$c$>>) ]
    ] in
    let a = m.(0).(0) in
    let ka, stateka = edge [`Draw; `Head `To] k [] a in
    let _, statecb = edge [`Draw;`Double 0.5] m.(1).(0) [] m.(0).(1) in
   drawing ~offset:(-10.) (List.rev (statecb @ stateka @ statem @ statek @ statei @ statej @ stateij))

 let _ = figure D.structure ~name:"figure de Tom" fig
}}

=<


=> The $\lambda$-calculus

=<

=> References

{{ thebibliography () }}

=<
