(* #FORMAT FormatSlides *)
(* #PACKAGES mysql *)
(* #PACKAGES Typography.Interactive *)

\Caml(
open Diagrams
open Proj3d
open Typography.Db
open DefaultFormat

let caml x = x

let db_info = Mysql Mysql.(
    { defaults with
      dbhost = Some "localhost";
      dbname = Some "patonet";
      dbpwd = Some "patonet";
      dbuser = Some "patonet";})

let db = init_db "demo" db_info
(*
let db = init_db "demo" Memory
*)
module MyDb = struct 
  let db = db
  let base_dir = "/tmp"
end

module Interactive =
  Interactive.Make(D)(Patoline_Format)(MyDb)
open Interactive  
)


\begin{slide}
\begin{center}
\size(5.0){Interactive Patoline}


\caml([bB (fun env-> [Drawing (image "titleduck.png" env)])])
\end{center}
\end{slide}



== Dynamisme ==

\begin{slide}
\begin{itemize}

\Caml(let count = db.create_data ~global:true "count" 0)
\item \button("test")(["cible"]){Un bouton} qui a été cliqué
\dynamic("cible")(function ev ->
  	  (match ev with 
	     Click "test"-> let c = count.read () + 1 in count.write c; Public 
           | _ -> Unchanged)){0123456789 fois}(
	   fun () -> <<\caml(let c = count.read () in [tT (string_of_int c)]) fois !>>)

\Caml(let count2 = db.create_data ~global:false "count2" 0)
\item \button("test")(["cible2"]){Un autre bouton} qui a été cliqué
\dynamic("cible2")(function ev ->
  	  (match ev with 
	     Click "test"-> let c = count2.read () + 1 in count2.write c; Public 
           | _ -> Unchanged)){0123456789 fois}(
	   fun () -> <<\caml(let c = count2.read () in [tT (string_of_int c)]) fois !>>)

\item Chercher la différence entre ces deux boutons ! indication~: ouvrez deux fois la présentation.

\item Et une figure dont on peut bouger les sommets :

\begin{center}
\Caml(
let aPos = db.create_data ~global:false "Apos" (10.0,10.0)
let bPos = db.create_data ~global:false "Bpos" (-10.0,-10.0)
let cPos = db.create_data ~global:false "Cpos" (10.0,-10.0)
)
\dynamic("figure")(
	function ev ->
  	  (match ev with
	   | Drag("a",p) -> aPos.write Vector.(p + aPos.read ()); Private
	   | Drag("b",p) -> bPos.write Vector.(p + bPos.read ()); Private
	   | Drag("c",p) -> cPos.write Vector.(p + cPos.read ()); Private
	   | _ -> Unchanged))([])(fun () -> <<
\diagram(
 let frame = Node.(node [at (0.,0.);rectangle env;draw; color (mix 0.5 white blue); innerSep 20.] [])
 let apos = aPos.read () and bpos = bPos.read () and cpos = cPos.read ()
 let av = Vector.(scal_mul 3. (normalise (apos - bpos + apos - cpos)))
 let bv = Vector.(scal_mul 3. (normalise (bpos - cpos + bpos - apos)))
 let cv = Vector.(scal_mul 3. (normalise (cpos - apos + cpos - bpos)))
 let ab = Node.(coord Point.(middle apos bpos))
 let bc = Node.(coord Point.(middle bpos cpos))
 let ca = Node.(coord Point.(middle cpos apos))
 let a = Node.(node [circle; fill black; innerSep 0.4; label ~pos:(`Vec av) env <<A>>; at apos; drag ("a",["figure"])] []) 
 let b = Node.(node [circle; fill black; innerSep 0.4; label ~pos:(`Vec bv) env <<B>>; at bpos; drag ("b",["figure"])] [])
 let c = Node.(node [circle; fill black; innerSep 0.4; label ~pos:(`Vec cv) env <<C>>; at cpos; drag ("c",["figure"])] [])
 let _ = edge Edge.([draw]) a b
 let _ = edge Edge.([draw]) b c
 let _ = edge Edge.([draw]) c a
 let _ = edge Edge.([draw]) a bc
 let _ = edge Edge.([draw]) b ca
 let _ = edge Edge.([draw]) c ab
)>>)

\end{center}
\end{itemize}
\end{slide}

\Caml(
type sondage =
  Null
| Fun_but
| Fun_yes
| No_opinion
| No_answer

let sonde = db.create_data ~global:false "sondage" No_answer

let box name s =
 dynamic name
 (function ev -> Private) 
 (<<$X$ $O$>>)
 (fun () -> if sonde.read () = s then (<<$X$>>) else (<<$O$>>))
)

\Caml(
let destinations = ["qui_res"]
let questions = Array.init 5 (fun i -> db.create_data ("box"^string_of_int i) false)
)

\begin{slide}
\Title{Qui êtes-vous ?}

\begin{raggedLeft}
\caml(checkBox  ~destinations questions.(0))(fun b -> << \b J'aime le nombre 42. >>)

\caml(checkBox  ~destinations questions.(1))(fun b -> << \b J'ai vu presque tous les épisodes de \italic{Startrek} ou \italic{Big-Bang Theory} >>)

\caml(checkBox  ~destinations questions.(2))(fun b -> << \b Je programme souvent >>)

\caml(checkBox  ~destinations questions.(3))(fun b -> << \b J'ai un casse tête que je ne sais pas résoudre >>)

\caml(checkBox  ~destinations questions.(4))(fun b -> << \b Mes amis me trouvent bizarre >>)
\end{raggedLeft}

\vspaceBefore(5.0)
\begin{center}
\dynamic("qui_res")(function _ -> Private){Vous êtes un humain bizarre geek}(fun () ->
    let nb = Array.fold_left (fun acc b -> if b.read() then succ acc else acc) 0 questions in
    let bizarre = questions.(4).read () in
    if nb >= 4 then <<Vous êtes un geek>>
    else if bizarre || nb >= 2 then <<Vous êtes un humain probablement bizarre>>
    else <<Vous êtes un humain>>
)
\end{center}
\end{slide}

\Caml(
type value = No_opinion | Not_clicked | Null | Fun_but | Fun_yes 
let values = [|Not_clicked ; Null; Fun_but; Fun_yes; No_opinion|] 
let data = db.create_data "Sondage" Not_clicked
let radios = radioButtons ~destinations:["histo"] data values
)

\begin{slide}

\begin{center}
\size(5.0){Un petit sondage}
\vspaceAfter(5.0)
\end{center}

\caml(radios.(1) (fun b -> << \b Patoline c'est null, ça ne marchera jamais. >>))

\caml(radios.(2) (fun b -> << \b Patoline c'est chouette, mais ça ne marchera pas. >>))

\caml(radios.(3) (fun b -> << \b Patoline c'est chouette, et ça va casser la baraque ! >>))

\caml(radios.(4) (fun b -> << \b Je ne sais pas. >>))

\end{slide}

\begin{slide}
\Title{Résultats du sondage}


\begin{center}
\dynamic("histo")(fun _ -> Public)([])(fun () ->
let total, results = data.distribution () in
let color v = match v with
  Null -> red
| Fun_but -> yellow
| Fun_yes -> green
| No_opinion -> grey
in
let values = List.tl (Array.to_list values) in
let res = List.map (fun value -> (color value, try List.assoc value results with Not_found -> 0)) values in
let m = List.fold_left (fun acc (_,n) -> max acc n) 1 res in
<<\diagram(
  let m,ms = array  [`South ; `South; `South ; `South ] (List.map (List.map mathsText) [
    List.map (fun (color, value as c) ->  
      <<\diagram(
        let _ = scoreBar ~vertical:true (module EnvDiagram) (30.0 *. float value /. float m) 7.0 [c])>>) 
      res;
    [<<Null>>; <<Fun Mais>>; <<Fun>>; <<N.S.P.>>]
]))>>)
\end{center}
\end{slide}


\begin{slide}

Un petit programme éditable (the program is compiled but not executed for security)~:

\caml(
  editableText ~nb_lines:5 ~lang:lang_OCaml ~extra:(test_ocaml ~run:false) ~init_text:"let _ = Printf.printf \"Hello World\\n\"" "testML" 
)

\end{slide}

== Animation ==

\begin{slide}

\begin{center}
\animation(90)(fun t -> let t = float t /. 45. *. 3.1415927 in
   let proj t = {distance_focale = 55.;
   origin_transfo_x = 10.;
   origin_transfo_y = 10.;
   origin_transfo_z = 10.; (* boucle avec 10.0 *)
   origin_diag = (10.,10.,10.); (* pour que le centre du cube ne bouge pas *)
   axe_angle = 0.;
   rot_angle = t;
   homotetie = 1.0;} in
   let projection = proj t in
<<\diagram(
(*   let _ = cube projection*)
 let a = Node.(node [anchor `Base;at3d projection (0.,0.,0.)] <<a>>) 
 let b = Node.(node [anchor `Base;at3d projection (20.,0.,0.)] <<b>>)
 let c = Node.(node [anchor `Base;at3d projection (20.,20.,0.)] <<c>>)
 let d = Node.(node [anchor `Base;at3d projection (0.,20.,0.)] <<d>>)
 let a' = Node.(node [anchor `Base;at3d projection (0.,0.,20.)] <<a'>>) 
 let b' = Node.(node [anchor `Base;at3d projection (20.,0.,20.)] <<b'>>) 
 let c' = Node.(node [anchor `Base;at3d projection (20.,20.,20.)] <<c'>>) 
 let d' = Node.(node [anchor `Base;at3d projection (0.,20.,20.)] <<d'>>) 


  let _ = edge_3d Edge.([arrow env;draw]) a b
  let _ = edge_3d Edge.([arrow env;draw]) d c
  let _ = edge_3d Edge.([arrow env;draw]) a d
  let _ = edge_3d Edge.([arrow env;draw]) b c

  let _ = edge_3d Edge.([arrow env;draw]) a' b'
  let _ = edge_3d Edge.([arrow env;draw]) d' c'
  let _ = edge_3d Edge.([arrow env;draw]) a' d'
  let _ = edge_3d Edge.([arrow env;draw]) b' c'

  let _ = edge_3d Edge.([arrow env;draw]) a' a
  let _ = edge_3d Edge.([arrow env;draw]) b' b
  let _ = edge_3d Edge.([arrow env;draw]) c' c
  let _ = edge_3d Edge.([arrow env;draw]) d' d

   let e' = Node.(node [at3d projection (10.,10.,10.);rectangle env;draw;innerSep 20.0] (<<x>>))

)>>)
\end{center}

\begin{center}
\size(7.0){Thanks for your attention}
\end{center}
\end{slide}

