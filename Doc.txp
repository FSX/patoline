====================================================
Documentation de TeX'

Pierre-Etienne Meunier et al.

LAMA UMR 5127, Université de Savoie
====================================================

{{
open Diag
module Env_abstract = struct
  let parameters a b c d line =
    let par=parameters a b c d line in
      { par with
          measure=120.;
          left_margin=par.left_margin +. (par.measure-.120.)/.2. }
  let textWidth = C.normal 120.
  let do_begin_abstract () = ()
  let do_end_abstract () = ()
end
let color x b = [Scoped ((fun env -> { env with fontColor = x }), b)]
let red=RGB {red=1.;green=0.;blue=0.}
let figRef ()= [B (fun _->[User (NamedCitation "figure de Tom")])]
let large text = [size 10. text]

let fig2 env=
  let state = [] in
  let params = { NodeShape.default with strokingColor=Some (RGB { red=0.;green=1.;blue=0. }); lineWidth=0.1 } 
  in  
  let a, state = Node.make_draw state { Node.default with
    Node.contents_spec = [T "Salut, comment ça miss?"] ;
    Node.shape = (NodeShape.circle ~parameters:params ~inner_sep:4. ()) }
  in
  let b, state = Node.make_draw state { Node.default with
    Node.at = (30.,70.) ;
    Node.contents_spec = [T "J"] ;
    Node.shape = (NodeShape.rectangle ~parameters:{ params with (* lineWidth=3. ;  *)
      lineJoin=Round_join} ~inner_sep:2. ()) }
  in
  let c, state = Node.make_draw state { Node.default with
    Node.at = (90.,30.) ;
    Node.contents_spec = (alternative Bold [T "Ailllaillaille!"]) ;
    Node.shape = (NodeShape.flower ~parameters:params ~amplitude:3. ()) }
  in
  let d, state = Node.make_draw state { 
    Node.at = b.Node.make_anchor Anchor.West ;
    Node.contents_spec =  (T "Cette figure est sur la page"::(pageref "figure de Tom")) ;
    Node.anchor = Anchor.East ;
    Node.shape = (NodeShape.rectangle 
		    ~parameters:{ params with lineWidth=0.5 ; lineJoin=Round_join} 
		    ~inner_sep:1. ()) }
  in
  let e, state = Node.make_draw state { Node.default with
    Node.at = c.Node.make_anchor Anchor.North ;
    Node.anchor = Anchor.South ;
    Node.contents_spec = [T "X"] ;
    Node.shape = (NodeShape.rectangle ~parameters:params ~inner_sep:4. ()) }
  in
  let ab, state = Edge.make_draw state { Edge.default with
    Edge.parameters_spec = { default with strokingColor=Some (RGB { red=0.;green=1.;blue=0. }); lineWidth=0.1 } ;
    Edge.head_spec = (fun ?parameters:(params=OutputCommon.default) curve ->
      ArrowTip.simple ~parameters:params curve) ;
    Edge.label_specs = [ 
      { Edge.pos = 0.3 ;
      Edge.node_spec = { Node.default with Node.contents_spec = [T "0.3 à gauche"] ; 
	anchor = Anchor.East } } ;
      { Edge.pos = 0.6 ;
      Edge.node_spec = { Node.default with Node.contents_spec = [T "0.6 à droite"] ; 
	anchor = Anchor.West } } ;
    ] }
    a b
  in
  (* let ab', state = Edge.make_draw state { Edge.default with *)
  (*   Edge.parameters_spec = { default with strokingColor=Some (RGB { red=0.7;green=0.7;blue=0.7 }); lineWidth=0.3 } ; *)
  (*   Edge.transfo_specs = [Edge.BendRight 30.0] } *)
  (*   a b *)
  (* in *)
  let ac, state = Edge.make_draw state { Edge.default with
    Edge.parameters_spec = { default with strokingColor=Some (RGB { red=0.7;green=0.7;blue=0.7 }); lineWidth=0.1 } ;
    Edge.transfo_specs = [Edge.SquiggleFromTo (4,1.0,0.3,0.7)] }
    a c
  in
  let cb, state = Edge.make_draw state { Edge.default with
    Edge.parameters_spec = { default with strokingColor=Some (RGB { red=0.;green=0.7;blue=0.7 }); lineWidth=0.2 } }
    c b
  in
  let ca, state = Edge.make_draw state { Edge.default with
    Edge.parameters_spec = { default with strokingColor=Some (RGB { red=0.2;green=0.2;blue=0.7 }); lineWidth=0.2 } ;
    Edge.transfo_specs = [Edge.BendLeft 60.0 ; Edge.Squiggle (10,1.0)] }
    c a
  in
  let ea, state = Edge.make_draw state { Edge.default with
    Edge.parameters_spec = { default with strokingColor=Some (RGB { red=0.2;green=0.2;blue=0.7 }); lineWidth=0.2 } ;
    Edge.transfo_specs = [Edge.Fore 2.] }
    e a
  in
  drawing ~offset:(-10.) (List.rev state)

}}

\Begin{abstract}
TeX' est un logiciel permettant de produire des documents de haute qualité. aoeunt a nth, nthn,.pn anh aoesntih antogntj pnont a,. ntqhjk\footnote{Il utilise un langage plus moderne que TeX pour la programmation : OCaml, une technologie plus évoluée pour l'analyse grammaticale : dypgen et on vise une qualité typographique supérieure.} \color{{red}}{La figure de Tom est sur la page \pageref{{"figure de Tom"}}}. La section sur les maths est la \sectref{{"maths"}}\footnote{C'est vrai}

\Italic
Pour l'instant le logiciel est en cours de développement et on est loin d'avoir atteint tous les objectifs !
\End{abstract}

-> Table des matieres

{{ table_of_contents !str 1 }}

-<

=> Introduction

\large{TeX' c'est bien mieux que TeX. Un point c'est tout.
  \italic{eeeet \alternative{{Bold}}{ouais !}} } \figRef


=<

=> Quick start

=> Mon premier Document

Pour faire un titre on utilise =>

=<
=<


=> Test Verbatim

Voici un programme écrit dans ce merveilleux language qu'est \alternative{{Caps}}{OCaml} :
''' OCaml
let f x = x
let g x = f (f x)
'''

=<

=> Test des polices

(*
Otf/lmmono10-italic.otf         Otf/lmmonoltcond10-oblique.otf      Otf/lmmonoslant10-regular.otf  Otf/lmromandemi10-regular.otf
Otf/lmmono10-regular.otf        Otf/lmmonoltcond10-regular.otf      Otf/lmroman10-bolditalic.otf   Otf/lmromandunh10-oblique.otf
Otf/lmmonocaps10-oblique.otf    Otf/lmmonoprop10-oblique.otf        Otf/lmroman10-bold.otf         Otf/lmromandunh10-regular.otf
Otf/lmmonocaps10-regular.otf    Otf/lmmonoprop10-regular.otf        Otf/lmroman10-italic.otf       Otf/lmromanslant10-bold.otf
Otf/lmmonolt10-boldoblique.otf  Otf/lmmonoproplt10-boldoblique.otf  Otf/lmroman10-regular.otf      Otf/lmromanslant10-regular.otf
Otf/lmmonolt10-bold.otf         Otf/lmmonoproplt10-bold.otf         Otf/lmromancaps10-oblique.otf
Otf/lmmonolt10-oblique.otf      Otf/lmmonoproplt10-oblique.otf      Otf/lmromancaps10-regular.otf
Otf/lmmonolt10-regular.otf      Otf/lmmonoproplt10-regular.otf      Otf/lmromandemi10-oblique.otf
*)

=> Latin Modern Roman

\family{{lmroman}}{\alternative{{Regular}}{Test latin modern roman regular et \italic{Test italic}}}

Un paragraphe avec \label{{"truc"}}


\family{{lmroman}}{\alternative{{Caps}}{Test latin modern roman caps et \italic{Test italic}}}

\family{{lmroman}}{\alternative{{Demi}}{Test latin modern roman demi et \italic{Test italic}}}

{{
figure ~name:"figure de Tom" fig2
}}

=<

=> Latin Modern Mono

\family{{lmmono}}{\alternative{{Regular}}{Test latin modern mono regular et \italic{Test italic}}}

\family{{lmmono}}{\alternative{{Bold}}{Test latin modern mono bold et \italic{Test italic}}}

\family{{lmmono}}{\alternative{{Caps}}{Test latin modern mono caps et \italic{Test italic}}}

\family{{lmmono}}{\alternative{{Demi}}{Test latin modern mono demi et \italic{Test italic}}}


=<

=< 

(* Alegreya raises : Opentype.Table_not_found
=> Alegreya
"test une chaine dans un commentaire *) }"
\family{{alegreya}}{\alternative{{Regular}}{Test Alegreya regular et \italic{Test italic}}}

\family{{alegreya}}{\alternative{{Bold}}{Test Alegreya bold et \italic{Test italic}}}

\family{{alegreya}}{\alternative{{Caps}}{Test Alegreya caps et \italic{Test italic}}}

\family{{alegreya}}{\alternative{{Demi}}{Test Alegreya demi et \italic{Test italic}}}
=<
*)

=> Math

=> Math en display \label{{"maths"}}

$$ 2+2$$

$$ \int_a^b {{1 + x} \over {1 - x}}$$

$$ x_i + 2 cos(x) \leftarrow a y_i^n - sin(t) $$

$$ t^^j__X_i^n $$

$$ B = t^^P * A * P = P^{-1} A P  $$

$$ f(x,y) = { x + y } \over { (x^2 + y^2) (x - y) } $$
=<

=> Math en paragraph

Un beau paragraphe avec des maths : $2 \over 3$, $2/3$, $cos(t)$, $x(t)$, $t^^j__X_i^n$, $t^^j__x_i^n$, $123^{-12.5}$.

=<

=> Test des symboles

Symboles : $\alpha$ $\int$

Addition like : $a + b$ $a - b$

Product like : $a . b$ $a * b$ $a / b$ $a \divide b$ $a \over b$ $a - b$

Relations : $a = b$ $a <= b$ $a >= b$ $a \in b$

Connecteurs : $a \land b$ $a \lor b$

Arrows : $a -> b$ $a => b$ $a <-> b$ $a <=> b$ $a <- b$ $a \Leftarrow b$

Punctuation : $a, b$ $a; b$

Prefix : $+a$ $-a$

Postfix : $a!$

=<
=< 
